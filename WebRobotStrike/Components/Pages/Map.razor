@page "/map"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.IO
@inject IJSRuntime JsRuntime

<h3>Map</h3>

<div class="card-body">
    <div class="row">
        <div class="col-md-6 mb-3">
            <h5>Upload JSON File</h5>
            <div class="input-group">
                <InputFile OnChange="HandleFileSelection" accept=".json" class="form-control" />
                <button type="button" class="btn btn-primary" @onclick="ProcessSelectedFile" disabled="@(_selectedFile == null)">Upload</button>
            </div>
        </div>

        <div class="col-md-6 mb-3">
            <h5>Paste JSON Data</h5>
            <div class="input-group">
                <textarea @bind="_mapJsonText" class="form-control" placeholder="Paste map JSON here" rows="1"></textarea>
                <button type="button" class="btn btn-primary" @onclick="ParseMapFromText">Load</button>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-3">
        @_errorMessage
    </div>
}

@if (_isLoading)
{
    <div class="d-flex justify-content-center mt-3">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <span class="ms-2">Loading...</span>
    </div>
}
else if (_mapTotal != null)
{
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            Map Information
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <strong>Width:</strong> @_mapTotal.MapWidth
                </div>
                <div class="col-md-4">
                    <strong>Height:</strong> @_mapTotal.MapHeight
                </div>
                <div class="col-md-4">
                    <strong>Tiles:</strong> @(_mapTotal.Tiles?.Count ?? 0)
                </div>
            </div>
        </div>
    </div>

    <div class="map-container p-2 border rounded">
        @for (int y = 0; y < _mapTotal.MapHeight; y++)
        {
            <div class="row g-0">
                @for (int x = 0; x < _mapTotal.MapWidth; x++)
                {
                    var tile = _mapTotal.Tiles?.FirstOrDefault(t => t.PosX == x && t.PosY == y);
                    if (tile != null)
                    {
                        <div class="col p-0">
                            <img src="@GetTileImagePath(tile.Type)"
                                 class="tile lazy"
                                 alt="@tile.Type"
                                 data-bs-toggle="tooltip"
                                 title="X: @tile.PosX, Y: @tile.PosY, Type: @tile.Type"
                                 loading="lazy" />
                        </div>
                    }
                }
            </div>
        }
    </div>

    <style>
        .map-container {
            width: fit-content;
        }
        .tile {
            width: 50px;
            height: 50px;
            margin: 1px;
        }
    </style>
}

@code {
    private MapTotal? _mapTotal;
    private IBrowserFile? _selectedFile;
    private bool _isLoading = false;
    private string _mapJsonText = "";
    private string? _errorMessage;

    private JsonSerializerOptions _jsonOptions = new JsonSerializerOptions
    {
        PropertyNameCaseInsensitive = true,
        AllowTrailingCommas = true
    };

    protected override void OnInitialized()
    {
        Console.WriteLine("Map component initialized");
    }

    public void HandleFileSelection(InputFileChangeEventArgs e)
    {
        _selectedFile = e.File;
        _errorMessage = null;
        Console.WriteLine($"File selected: {_selectedFile.Name}");
    }

    public async Task ProcessSelectedFile()
    {
        Console.WriteLine("ProcessSelectedFile called");
        if (_selectedFile == null) return;

        _isLoading = true;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            Console.WriteLine($"Processing file: {_selectedFile.Name}");
            using var stream = _selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            
            using var reader = new StreamReader(memoryStream);
            var json = await reader.ReadToEndAsync();
            
            Console.WriteLine($"JSON content: {json.Substring(0, Math.Min(100, json.Length))}...");

            _mapTotal = JsonSerializer.Deserialize<MapTotal>(json, _jsonOptions);

            if (_mapTotal == null)
            {
                _errorMessage = "Failed to parse JSON: Invalid format";
                Console.WriteLine("Map deserialized to null");
            }
            else
            {
                Console.WriteLine($"Map loaded: {_mapTotal.MapWidth}x{_mapTotal.MapHeight}, {_mapTotal.Tiles?.Count ?? 0} tiles");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error loading map: {ex}");
            _mapTotal = null;
        }
        finally
        {
            _isLoading = false;
            _selectedFile = null;
            StateHasChanged();
        }
    }

    public void ParseMapFromText()
    {
        Console.WriteLine("ParseMapFromText called");
        if (string.IsNullOrWhiteSpace(_mapJsonText)) return;

        _isLoading = true;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            Console.WriteLine($"Parsing JSON text: {_mapJsonText.Substring(0, Math.Min(100, _mapJsonText.Length))}...");
            _mapTotal = JsonSerializer.Deserialize<MapTotal>(_mapJsonText, _jsonOptions);

            if (_mapTotal == null)
            {
                _errorMessage = "Failed to parse JSON: Invalid format";
                Console.WriteLine("Map deserialized to null");
            }
            else
            {
                Console.WriteLine($"Map loaded: {_mapTotal.MapWidth}x{_mapTotal.MapHeight}, {_mapTotal.Tiles?.Count ?? 0} tiles");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error parsing JSON: {ex}");
            _mapTotal = null;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private string GetTileImagePath(string tileType)
    {
        return $"images/Tiles/{tileType.ToLowerInvariant()}.png";
    }

    public class MapCase
    {
        [JsonPropertyName("x")]
        public int PosX { get; set; }

        [JsonPropertyName("y")]
        public int PosY { get; set; }

        [JsonPropertyName("type")]
        public required string Type { get; set; }
    }

    public class MapTotal
    {
        [JsonPropertyName("map_width")]
        public int MapWidth { get; init; }

        [JsonPropertyName("map_height")]
        public int MapHeight { get; init; }

        [JsonPropertyName("tiles")]
        public List<MapCase> Tiles { get; init; } = [];
    }
}