@page "/map"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.IO

<h3>Map</h3>

<div class="card-body">
    <div class="row">
        <div class="col-md-6 mb-3">
            <h5>Upload JSON File</h5>
            <div class="input-group">
                <InputFile OnChange="HandleFileSelection" accept=".json" class="form-control" />
                <button type="button" class="btn btn-primary" @onclick="ProcessSelectedFile" disabled="@(_selectedFile == null)">Upload</button>
            </div>
        </div>

        <div class="col-md-6 mb-3">
            <h5>Paste JSON Data 10*10 maximum size</h5>
            <div class="input-group">
                <textarea @bind="_mapJsonText" class="form-control" placeholder="Paste map JSON here" rows="1"></textarea>
                <button type="button" class="btn btn-primary" @onclick="ParseMapFromText">Load</button>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-3">
        @_errorMessage
    </div>
}
else if (_mapTotal != null)
{
    <div class="map-controls mb-3">
        <div class="btn-group">
            <button class="btn btn-outline-secondary" @onclick="ZoomOut"><i class="bi bi-zoom-out"></i></button>
            <button class="btn btn-outline-secondary">Zoom: @_tileSize px</button>
            <button class="btn btn-outline-secondary" @onclick="ZoomIn"><i class="bi bi-zoom-in"></i></button>
        </div>

        <div class="form-check form-switch ms-3">
            <input class="form-check-input" type="checkbox" id="showCoordinates" @bind="_showCoordinates">
            <label class="form-check-label" for="showCoordinates">Afficher les coordonnées</label>
        </div>
    </div>

    <div class="map-outer-container">
        <div class="map-container p-2 border rounded" style="--tile-size: @(_tileSize)px">
            @if (_showCoordinates)
            {
                <div class="coordinates-x" style="grid-template-columns: repeat(@_mapTotal.MapWidth, @(_tileSize)px);">
                    @for (int x = 0; x < _mapTotal.MapWidth; x++)
                    {
                        <div class="coordinate">@x</div>
                    }
                </div>
            }

            <div class="grid-container">
                @if (_showCoordinates)
                {
                    <div class="coordinates-y" style="grid-template-rows: repeat(@_mapTotal.MapHeight, @(_tileSize)px);">
                        @for (int y = 0; y < _mapTotal.MapHeight; y++)
                        {
                            <div class="coordinate">@y</div>
                        }
                    </div>
                }
                <div class="tile-grid" style="grid-template-columns: repeat(@_mapTotal.MapWidth, @(_tileSize)px);
                grid-template-rows: repeat(@_mapTotal.MapHeight, @(_tileSize)px);">

                    @for (int y = 0; y < _mapTotal.MapHeight; y++)
                    {
                        @for (int x = 0; x < _mapTotal.MapWidth; x++)
                        {
                            var tile = _mapTotal.Tiles?.FirstOrDefault(t => t.PosX == x && t.PosY == y);
                            if (tile != null)
                            {
                                <div class="tile-wrapper" data-x="@x" data-y="@y" @onclick="() => ShowTileDetails(tile)" 
                                     style="width: @(_tileSize)px; height: @(_tileSize)px;">
                                    <img src="@GetTileImagePath(tile.Type)"
                                         class="tile"
                                         alt="@tile.Type"
                                         title="X: @tile.PosX, Y: @tile.PosY, Type: @tile.Type"
                                         loading="lazy"/>
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        </div>

        @if (_selectedTile != null)
        {
            <div class="tile-details card my-3 pb-1">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Détails de la tuile</span>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="() => _selectedTile = null"></button>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-4">
                            <img src="@GetTileImagePath(_selectedTile.Type)" class="img-fluid" alt="@_selectedTile.Type"/>
                        </div>
                        <div class="col-8">
                            <p><strong>Position:</strong> X: @_selectedTile.PosX, Y: @_selectedTile.PosY</p>
                            <p><strong>Type:</strong> @_selectedTile.Type</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<style>
    .map-outer-container {
        max-width: 100%;
        overflow-x: auto;
    }

    .map-container {
        --tile-size: 50px;
        width: fit-content;
    }
    
    .grid-container {
        display: flex;
    }
    
    .tile-grid {
        display: grid;
        gap: 1px;
    }
    
    .tile {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .tile-wrapper {
        position: relative;
        cursor: pointer;
        transition: transform 0.1s;
    }
    
    .tile-wrapper:hover {
        transform: scale(1.05);
        z-index: 10;
        box-shadow: 0 0 5px rgba(0,0,0,0.3);
    }
    
    .coordinates-x {
        display: grid;
        gap: 1px;
        padding-left: 20px;
        margin-bottom: 4px;
    }
    
    .coordinates-y {
        display: grid;
        gap: 1px;
        margin-right: 4px;
        width: 20px;
    }
    
    .coordinate {
        text-align: center;
        font-size: 0.7rem;
        color: var(--bs-secondary);
    }
</style>

@code {
    // variables utilisées entre le html et le code
    private MapTotal? _mapTotal;
    private IBrowserFile? _selectedFile;
    private string _mapJsonText = "";
    private string? _errorMessage;
    
    // variables pour modifier le comportement de l'affiachage
    private int _tileSize = 50;
    private bool _showCoordinates = false;
    private MapCase? _selectedTile;
    

    private JsonSerializerOptions _jsonOptions = new JsonSerializerOptions
    {
        PropertyNameCaseInsensitive = true,
        AllowTrailingCommas = true
    };

    protected override void OnInitialized()
    {
        Console.WriteLine("Map component initialized");
    }

    public void HandleFileSelection(InputFileChangeEventArgs e)
    {
        _selectedFile = e.File;
        _errorMessage = null;
        Console.WriteLine($"File selected: {_selectedFile.Name}");
    }

    // fonctions visuelles de la carte
    private void ZoomIn()
    {
        _tileSize = Math.Min(100, _tileSize + 10);
    }
    
    private void ZoomOut()
    {
        _tileSize = Math.Max(20, _tileSize - 10);
    }
    
    private void ShowTileDetails(MapCase tile)
    {
        _selectedTile = tile;
    }

    
    public async Task ProcessSelectedFile()
    {
        Console.WriteLine("ProcessSelectedFile called");
        if (_selectedFile == null) return;

        _errorMessage = null;
        StateHasChanged();

        try
        {
            Console.WriteLine($"Processing file: {_selectedFile.Name}");
            using var stream = _selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            
            using var reader = new StreamReader(memoryStream);
            var json = await reader.ReadToEndAsync();
            
            Console.WriteLine($"JSON content: {json.Substring(0, Math.Min(100, json.Length))}...");

            _mapTotal = JsonSerializer.Deserialize<MapTotal>(json, _jsonOptions);

            if (_mapTotal == null)
            {
                _errorMessage = "Failed to parse JSON: Invalid format";
                Console.WriteLine("Map deserialized to null");
            }
            else
            {
                Console.WriteLine($"Map loaded: {_mapTotal.MapWidth}x{_mapTotal.MapHeight}, {_mapTotal.Tiles.Count} tiles");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error loading map: {ex}");
            _mapTotal = null;
        }
        finally
        {
            _selectedFile = null;
            StateHasChanged();
        }
    }

    public void ParseMapFromText()
    {
        Console.WriteLine("ParseMapFromText called");
        if (string.IsNullOrWhiteSpace(_mapJsonText)) return;

        _errorMessage = null;
        StateHasChanged();

        try
        {
            Console.Write("Something strange is happenning");

            Console.WriteLine($"Parsing JSON text: {_mapJsonText.Substring(0, Math.Min(100, _mapJsonText.Length))}...");
            _mapTotal = JsonSerializer.Deserialize<MapTotal>(_mapJsonText, _jsonOptions);

            if (_mapTotal == null)
            {
                _errorMessage = "Failed to parse JSON: Invalid format";
                Console.WriteLine("Map deserialized to null");
            }
            else
            {
                Console.WriteLine($"Map loaded: {_mapTotal.MapWidth}x{_mapTotal.MapHeight}, {_mapTotal.Tiles.Count} tiles");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error parsing JSON: {ex}");
            _mapTotal = null;
        }
        finally
        {
            Console.Write("What is happening ?");
            StateHasChanged();
        }
    }

    private string GetTileImagePath(string tileType)
    {
        return $"images/Tiles/{tileType.ToLowerInvariant()}.png";
    }

    public class MapCase
    {
        [JsonPropertyName("x")]
        public int PosX { get; set; }

        [JsonPropertyName("y")]
        public int PosY { get; set; }

        [JsonPropertyName("type")]
        public required string Type { get; set; }
    }

    public class MapTotal
    {
        [JsonPropertyName("map_width")]
        public int MapWidth { get; init; }

        [JsonPropertyName("map_height")]
        public int MapHeight { get; init; }

        [JsonPropertyName("tiles")]
        public List<MapCase> Tiles { get; init; } = [];
    }
}
