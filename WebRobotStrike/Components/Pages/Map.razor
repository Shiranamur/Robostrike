@page "/map"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.IO
@inject IJSRuntime JsRuntime

<h3>Map</h3>
@if (_mapTotal != null)
{
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            Map Information
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <strong>Width:</strong> @_mapTotal.MapWidth
                </div>
                <div class="col-md-4">
                    <strong>Height:</strong> @_mapTotal.MapHeight
                </div>
                <div class="col-md-4">
                    <strong>Tiles:</strong> @_mapTotal.Tiles.Count
                </div>
            </div>
        </div>
    </div>

    <div class="map-container p-2 border rounded">
        @for (int y = 0; y < _mapTotal.MapHeight; y++)
        {
            <div class="row g-0">
                @for (int x = 0; x < _mapTotal.MapWidth; x++)
                {
                    var tile = _mapTotal.Tiles?.FirstOrDefault(t => t.PosX == x && t.PosY == y);
                    if (tile != null)
                    {
                        <div class="col p-0">
                            <img src="@GetTileImagePath(tile.Type)"
                                 class="tile lazy"
                                 alt="@tile.Type"
                                 data-bs-toggle="tooltip"
                                 title="X: @tile.PosX, Y: @tile.PosY, Type: @tile.Type"
                                 loading="lazy" />
                        </div>
                    }
                }
            </div>
        }
    </div>

    <style>
        .map-container {
            width: fit-content;
        }
        .tile {
            width: 50px;
            height: 50px;
            margin: 1px;
        }
    </style>
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    private MapTotal? _mapTotal;
    private readonly string _filePath = "../Map/map_test.json";

    protected override async Task OnInitializedAsync()
    {
        _mapTotal = await JsonParser.ParseJsonAsync(_filePath);
        Console.Write($"{_filePath} \n{_mapTotal}\n");
        Console.WriteLine($"Map height: {_mapTotal.MapHeight}");
        Console.WriteLine($"Map Width: {_mapTotal.MapWidth}");
        Console.WriteLine($"Map tiles: {_mapTotal.Tiles.Count}");
    }

    private string GetTileImagePath(string tileType)
    {
        // Maps each tile type to its corresponding image
        return $"images/tiles/{tileType.ToLowerInvariant()}.png";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("enableTooltips");
        }
    }

    public class MapCase
    {
        [JsonPropertyName("x")]
        public int PosX { get; set; }

        [JsonPropertyName("y")]
        public int PosY { get; set; }

        [JsonPropertyName("type")]
        public required string Type { get; set; }
    }


    public class MapTotal
    {
        [JsonPropertyName("map_width")]
        public int MapWidth { get; init; }

        [JsonPropertyName("map_height")]
        public int MapHeight { get; init; }

        [JsonPropertyName("tiles")]
        public List<MapCase> Tiles { get; init; } = [];
    }

    public static class JsonParser
    {
        public static async Task<MapTotal> ParseJsonAsync(string filepath)
        {
            string jsonString = await File.ReadAllTextAsync(filepath);
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = false
            };

            MapTotal? mapTotal = JsonSerializer.Deserialize<MapTotal>(jsonString, options);
            return mapTotal ?? new MapTotal();
        }
    }
}