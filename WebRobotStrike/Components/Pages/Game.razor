@page "/game"
@using System.Text
@using System.Text.Json
@using System.Threading
@using System.Threading.Tasks
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IDisposable
@rendermode InteractiveServer

<h3>Match ID: @gameData?.matchId</h3>

<div id="game-container">
    <!-- Map container -->
    <div id="map"></div>

    @if (!IsGameOver)
    {
        <textarea id="hudTextArea" @bind="PlayerCommands" maxlength="6"></textarea>
        <div id="hudButtons">
            <button id="rotateLeftBtn">Rotate Left</button>
            <button id="rotateRightBtn">Rotate Right</button>
            <button id="forwardBtn">Forward</button>
            <button id="reverseBtn">Reverse</button>
            <button id="shootBtn">Shoot</button>
            <button id="deleteBtn">Delete</button>
            <button id="sendBtn" @onclick="SendPlayerInput">Send</button>
        </div>
        <div id="flashMessage" class="flash">Input limit reached!</div>
    }
    else
    {
        <button class="btn btn-primary" @onclick="ReturnToHub">
            Return to Hub
        </button>
    }
</div>

@code {
    public class Tile
    {
        public int x { get; set; }
        public int y { get; set; }
        public string Type { get; set; }
    }

    public class MapData
    {
        public int map_width { get; set; }
        public int map_height { get; set; }
        public List<Tile> tiles { get; set; }
    }

    public class GameData
    {
        public string matchId { get; set; }
        public MapData map { get; set; }
        public List<Player> players { get; set; }
    }

    public class Player
    {
        public int id { get; set; }
        public int inGameId { get; set; }
        public int x { get; set; }
        public int y { get; set; }
        public string direction { get; set; }
        public string curInput { get; set; }
    }
    
    private GameData gameData;
    private string PlayerCommands { get; set; } = "";
    private int CountDown { get; set; } = 10;
    private bool IsGameOver = false;
    private int _lastProcessedRound = -1;
    
    private PeriodicTimer _timer;
    private CancellationTokenSource _cts;
    
    
    /// <summary>
    /// Reads the player’s HUD commands from the textarea, sends them to the server via an HTTP PUT
    /// to /api/game/{matchId}/inputs, and clears the input box on success.
    /// </summary>
    private async Task SendPlayerInput()
    {
        var gameId = gameData?.matchId;
        var sessionToken = await JS.InvokeAsync<string>("localStorage.getItem", "sessionToken");
        if (string.IsNullOrEmpty(gameId) || string.IsNullOrEmpty(sessionToken))
        {
            //Console.WriteLine("Missing game ID or session token.");
            return;
        }
        
        PlayerCommands = await JS.InvokeAsync<string>(
            "eval", "document.getElementById('hudTextArea').value");
        //Console.WriteLine($"playerCommands : {PlayerCommands}");

        var url = $"http://localhost:5181/api/game/{gameId}/inputs";
        var request = new HttpRequestMessage(HttpMethod.Put, url)
        {
            Content = new StringContent(
                JsonSerializer.Serialize(PlayerCommands),
                Encoding.UTF8,
                "application/json")
        };
        request.Headers.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", sessionToken);

        try
        {
            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                //Console.WriteLine("Server response: " + await response.Content.ReadAsStringAsync());
                PlayerCommands = "";
                StateHasChanged();
            }
            else
            {
                //Console.WriteLine("Failed to send input: " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            //Console.WriteLine("Exception sending input: " + ex.Message);
        }
    }

    
    /// <summary>
    /// Continuously polls the game‐status endpoint every 2 seconds using a PeriodicTimer.
    /// </summary>
    /// <param name="token">A cancellation token to stop polling when requested or when the game ends.</param>
    private async Task RunStatusLoop(CancellationToken token)
    {
        var sessionToken = await JS.InvokeAsync<string>("localStorage.getItem", "sessionToken");

        while (await _timer.WaitForNextTickAsync(token)
               && !token.IsCancellationRequested
               && !IsGameOver)
        {
            try
            {
                using var request = new HttpRequestMessage(
                    HttpMethod.Get,
                    $"http://localhost:5181/api/game/{gameData.matchId}/status");
                request.Headers.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", sessionToken);

                var response = await Http.SendAsync(request, token);
                //Console.WriteLine($"{response}");
                if (!response.IsSuccessStatusCode)
                {
                    if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                    {
                        break;
                    }
                    continue;
                }

                var jsonString = await response.Content.ReadAsStringAsync(token);
                using var doc = JsonDocument.Parse(jsonString);
                var root = doc.RootElement;

                if (root.TryGetProperty("status", out var statusEl))
                {
                    if (statusEl.TryGetProperty("gameOver", out var goEl))
                    {
                        var over = (goEl.ValueKind == JsonValueKind.True)
                                   || (goEl.ValueKind == JsonValueKind.String
                                       && bool.TryParse(goEl.GetString(), out var parsed)
                                       && parsed);
                        if (over)
                        {
                            IsGameOver = true;
                            await InvokeAsync(StateHasChanged);
                            //Console.WriteLine("Game Over detected");
                            await JS.InvokeVoidAsync("onGameOver");
                            break;
                        }
                    }
                    
                    if (statusEl.TryGetProperty("round", out var roundEl))
                    {
                        int roundNumber = 0;
                        if (roundEl.TryGetProperty("roundNumber", out var rnEl))
                            roundNumber = rnEl.GetInt32();

                        var hasTurns = roundEl.TryGetProperty("turns", out var tEl)
                                       && tEl.ValueKind == JsonValueKind.Array
                                       && tEl.GetArrayLength() > 0;
                        

                        if (hasTurns && roundNumber > _lastProcessedRound)
                        {
                            _lastProcessedRound = roundNumber;
                            var roundJson = roundEl.GetRawText();
                            await JS.InvokeVoidAsync("animateRound", roundJson);
                        }
                    }
                }
                else
                {
                    //Console.WriteLine("No valid status object");
                }
            }
            catch (OperationCanceledException)
            {
                // normal when we cancel
                break;
            }
            catch (Exception ex)
            {
                //Console.WriteLine("Exception in polling loop: " + ex.Message);
            }
        }
    }
    
    /// <summary>
    /// Performs first‐render setup: loads initial game data from local storage, starts the JS game loop,
    /// and initializes the background polling timer.
    /// </summary>
    /// <param name="firstRender">True if this is the first time the component has rendered.</param>
    /// <returns>A task that completes after the initial setup is done.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        gameData = await JS.InvokeAsync<GameData>(
            "window.localStore.getJson", "initialGameData");
        StateHasChanged();
        await JS.InvokeVoidAsync("startGameLoop", gameData);
        
        _cts = new CancellationTokenSource();
        _timer = new PeriodicTimer(TimeSpan.FromSeconds(2));
        _ = RunStatusLoop(_cts.Token);
    }

    private void ReturnToHub()
        => NavigationManager.NavigateTo("/hub");

    public void Dispose()
    {
        _cts?.Cancel();
        _timer?.Dispose();
    }
}
