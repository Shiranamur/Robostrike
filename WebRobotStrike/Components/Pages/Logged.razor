@page "/logged"
@using BlazorApp1.Services
@inject SessionService SessionService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

@if (!isReady)
{
    <p>Loading...</p>
}
else if (!isLoggedIn)
{
    <p>You must be logged in!</p>
    <button @onclick="GoLogin">Go to Login</button>
}
else
{
    <h3>Welcome, you are authenticated!</h3>
    <button @onclick="HandleLogout">Logout</button>
    <button @onclick="Matchmaking">Launch Matchmaking</button>
}

@code {
    private bool isReady;       // Has the circuit fully rendered & we’ve done the JS check?
    private bool isLoggedIn;    // Did we find a valid token?

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // This runs AFTER the Blazor circuit is established, so JS interop is allowed.
            var token = await JS.InvokeAsync<string>("localStore.get", "sessionToken");

            if (!string.IsNullOrEmpty(token))
            {
                // Check with the server if token is valid
                var user = await SessionService.ValidateSessionTokenAsync(token);
                isLoggedIn = (user != null);
            }
            else
            {
                isLoggedIn = false;
            }

            isReady = true;
            StateHasChanged();  // Re-render with updated values
        }
    }

    private void GoLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private async Task HandleLogout()
    {
        // If you want to fully log the user out, remove the token from localStorage
        var token = await JS.InvokeAsync<string>("localStore.get", "sessionToken");
        if (!string.IsNullOrEmpty(token))
        {
            await SessionService.InvalidateSessionTokenAsync(token);
            await JS.InvokeVoidAsync("localStore.remove", "sessionToken");
        }

        // Optionally redirect or show a logged-out message
        Navigation.NavigateTo("/login");
    }

    private async Task Matchmaking()
    {
        using var httpClient = new HttpClient();
        try
        {
            var token = await JS.InvokeAsync<string>("localStore.get", "sessionToken"); // get token
            // add token into header
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token); 
            HttpResponseMessage response = await httpClient.GetAsync("http://127.0.0.1:5181/api/matchmaking/join");
            response.EnsureSuccessStatusCode();
            string responseBody = await response.Content.ReadAsStringAsync();

            Console.WriteLine("Response recieved");
            Console.WriteLine(responseBody);
            
            Navigation.NavigateTo("/matchmaking");
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Request errror: {e.Message}");
        }
    }
}