@page "/hub"
@using System.Text.Json
@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="hub-container">
    <div class="hub-card">
        <h1 class="mb-3">RoboStrike Hub</h1>
        <p class="mb-4">Find a game and jump straight in!</p>
        @if (!isInQueue)
        {
            <button class="join-button" @onclick="JoinMatchmaking">Join Matchmaking</button>
        }
        else
        {
            <p class="status-message">@statusMessage</p>
            <button class="leave-button" @onclick="LeaveMatchmaking">Leave Matchmaking</button>
        }
    </div>
</div>

@code {
    private bool isInQueue = false;
    private string statusMessage = "";

    private CancellationTokenSource? cts;

    // Join matchmaking
    private async Task JoinMatchmaking()
    {
        statusMessage = "[Debug] JoinMatchmaking() called.";
        await JS.InvokeVoidAsync("console.log", "[Hub] JoinMatchmaking fired");

        StateHasChanged();

        // Retrieve token from localStorage
        var token = await GetTokenAsync();
        Console.WriteLine("[Hub] Token retrieved: " + token);
        if (string.IsNullOrWhiteSpace(token))
        {
            statusMessage += "\n[Error] No token found in localStorage. Cannot join matchmaking.";
            StateHasChanged();
            return;
        }

        try
        {
            await JS.InvokeVoidAsync("console.log", "[request] entering try catch ");
            var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5181/api/matchmaking/join");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            statusMessage += "\n[Debug] GET /api/matchmaking/join with Bearer token...";
            StateHasChanged();

            var response = await Http.SendAsync(request);
            if (!response.IsSuccessStatusCode)
            {
                // If unauthorized or other error, set isInQueue = false
                statusMessage += $"\n[Error] Join matchmaking failed: HTTP {response.StatusCode}";
                StateHasChanged();
                isInQueue = false;
                return;
            }

            // If successful
            statusMessage += "\n[Debug] Successfully joined matchmaking. Polling for status...";
            StateHasChanged();

            isInQueue = true;
            cts = new CancellationTokenSource();
            _ = PollMatchStatus(cts.Token);
        }
        catch (Exception ex)
        {
            statusMessage += "\n[Exception] " + ex.Message;
            StateHasChanged();
            isInQueue = false;
        }
    }

private async Task PollMatchStatus(CancellationToken token)
{
    statusMessage += "\n[Debug] PollMatchStatus() started.";
    StateHasChanged();

    while (!token.IsCancellationRequested)
    {
        try
        {
            var localToken = await GetTokenAsync();
            if (string.IsNullOrWhiteSpace(localToken))
            {
                statusMessage += "\n[Error] No token found while polling. Stopping.";
                StateHasChanged();
                isInQueue = false;
                return;
            }
            
            var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5181/api/matchmaking/status");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", localToken);

            statusMessage += "\n[Debug] GET /api/matchmaking/status with Bearer token...";
            StateHasChanged();
            
            var resp = await Http.SendAsync(request, token);
            if (!resp.IsSuccessStatusCode)
            {
                statusMessage += $"\n[Error] Polling returned HTTP {resp.StatusCode}";
                StateHasChanged();
                isInQueue = false;
                return;
            }
            
            var jsonString = await resp.Content.ReadAsStringAsync(token);
            statusMessage += $"\n[Debug] Poll response: {jsonString}";
            StateHasChanged();
            
            using var doc = JsonDocument.Parse(jsonString);

            if (doc.RootElement.TryGetProperty("status", out var statusEl))
            {
                if (statusEl.ValueKind == JsonValueKind.Object)
                {
                    if (statusEl.TryGetProperty("matchId", out var midEl))
                    {
                        var matchId = midEl.GetString();
                        if (!string.IsNullOrEmpty(matchId))
                        {
                            var statusObject = JsonSerializer.Deserialize<object>(statusEl.GetRawText());
                            
                            await JS.InvokeVoidAsync("window.localStore.setJson", "initialGameData", statusObject);

                            statusMessage += $"\n[Debug] Match found: {matchId}. Navigating to /game/{matchId}";
                            StateHasChanged();
                            
                            isInQueue = false;
                            
                            Nav.NavigateTo($"/game");
                            return;
                        }
                    }
                    else
                    {
                        statusMessage += "\n[Debug] 'status' object found, but no 'matchId' property.";
                        StateHasChanged();
                    }
                }
                else
                {
                    var str = statusEl.GetString();
                    if (str?.Contains("No updates") == true)
                    {
                        statusMessage += "\n[Debug] No updates yet, still polling...";
                        StateHasChanged();
                    }
                    else if (str?.Contains("Request canceled") == true)
                    {
                        statusMessage += "\n[Debug] Request canceled by server.";
                        StateHasChanged();
                        isInQueue = false;
                        return;
                    }
                    else
                    {
                        statusMessage += "\n[Debug] status: " + str;
                        StateHasChanged();
                    }
                }
            }
            
            await Task.Delay(2000, token);
        }
        catch (TaskCanceledException)
        {
            statusMessage += "\n[Debug] Polling canceled.";
            StateHasChanged();
            return;
        }
        catch (Exception ex)
        {
            statusMessage += $"\n[Exception] Polling error: {ex.Message}";
            StateHasChanged();
            isInQueue = false;
            return;
        }
    }
}


    // Leave matchmaking
    private async Task LeaveMatchmaking()
    {
        if (cts != null && !cts.IsCancellationRequested)
        {
            cts.Cancel();
        }

        statusMessage = "[Debug] Leaving matchmaking...";
        StateHasChanged();

        var token = await GetTokenAsync();
        if (string.IsNullOrWhiteSpace(token))
        {
            statusMessage += "\n[Error] No token found to leave matchmaking.";
            StateHasChanged();
            isInQueue = false;
            return;
        }

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5181/api/matchmaking/leave");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var resp = await Http.SendAsync(request);
            if (!resp.IsSuccessStatusCode)
            {
                statusMessage += $"\n[Error] Leave matchmaking failed: HTTP {resp.StatusCode}";
                StateHasChanged();
            }
            else
            {
                statusMessage += "\n[Debug] Successfully left the queue.";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            statusMessage += "\n[Exception] " + ex.Message;
            StateHasChanged();
        }

        // In either case, we are no longer in queue
        isInQueue = false;
    }

    // Helper to fetch the bearer token from localStorage
    private async Task<string?> GetTokenAsync()
    {
        return await JS.InvokeAsync<string?>("localStorage.getItem", "sessionToken");
    }
}
